#!/usr/bin/env node

const encodings = {

  "pson"(){
    const PSON = require('pson');
    const pson = new PSON.ProgressivePair();
    require('get-stdin')
    .buffer()
    .then(b => {
      const data = JSON.parse(b);
      let bOut = pson.toBuffer(data); //First seed dict
      bOut = pson.toBuffer(data);     //Then again seeded
      process.stdout.write(bOut);
    });
  },

  "bson"(){
    const BSON = require('bson');
    const bson = new BSON();
    require('get-stdin')
    .buffer()
    .then(b => {
      const data = JSON.parse(b);
      let out = bson.serialize(data);
      process.stdout.write(out);
    });
  },

  "cbor"(){
    const cbor = require('borc');

    require('get-stdin')
    .buffer()
    .then(b => {
      const data = JSON.parse(b);
      const out = cbor.encode(data);
      process.stdout.write(out);
    });
  },

  "msgpack"(){
    var msgpack = require("msgpack-lite");

    require('get-stdin')
    .buffer()
    .then(b => {
      const data = JSON.parse(b);
      const out = msgpack.encode(data);
      process.stdout.write(out);
    });
  },

};

process.on('unhandledRejection', error => {
  throw error;
});


const encoding = encodings[process.argv[2]];
if (typeof encoding === 'function') {
  encoding();
} else {
  throw new Error("Unsupported encoding: " + encoding);
}
